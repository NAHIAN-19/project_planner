openapi: 3.0.3
info:
  title: Project Planner API
  version: 1.0.0
  description: API documentation for Project Planner.
paths:
  /api/v1/projects/:
    get:
      operationId: v1_projects_list
      description: API view to list all projects for the authenticated user and create
        a new project.
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
          description: ''
    post:
      operationId: v1_projects_create
      description: Get a list of all projects for the authenticated user or create
        a new project.
      summary: List and Create Projects
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/{id}/:
    get:
      operationId: v1_projects_retrieve
      description: API view to retrieve, update, or delete a specific project.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: v1_projects_update
      description: Get details of a specific project, update its information, or delete
        it.
      summary: Retrieve, Update or Delete a Project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
        '204':
          description: No response body
    patch:
      operationId: v1_projects_partial_update
      description: Update partial information of a specific project.
      summary: Partially Update a Project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: v1_projects_destroy
      description: Delete a specific project.
      summary: Delete a Project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/{id}/members/:
    post:
      operationId: v1_projects_members_create
      description: Add one or more users as members to a specific project.
      summary: Add Members to Project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              user_ids:
              - 1
              - 2
              - 3
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
    delete:
      operationId: v1_projects_members_destroy
      description: Remove one or more users from a specific project.
      summary: Remove Members from Project
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/subscriptions/cancel/:
    post:
      operationId: v1_subscriptions_cancel_create
      description: Cancel the authenticated user's subscription and revert to the
        basic plan.
      summary: Cancel subscription
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/subscriptions/checkout-session/:
    post:
      operationId: v1_subscriptions_checkout_session_create
      description: Generate a Stripe checkout session for the authenticated user to
        upgrade their subscription.
      summary: Create checkout session
      parameters:
      - in: query
        name: plan_id
        schema:
          type: integer
        description: ID of the subscription plan to upgrade to
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/subscriptions/me/:
    get:
      operationId: v1_subscriptions_me_retrieve
      description: Retrieve the details of the currently active subscription for the
        authenticated user.
      summary: Get current user's subscription details
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: ''
  /api/v1/subscriptions/payments/:
    get:
      operationId: v1_subscriptions_payments_list
      description: Retrieve a list of all payments made by the authenticated user.
      summary: List user payments
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
          description: ''
  /api/v1/subscriptions/plans/:
    get:
      operationId: v1_subscriptions_plans_list
      description: Retrieve a list of all available subscription plans.
      summary: List all subscription plans
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionPlan'
          description: ''
  /api/v1/subscriptions/stripe/webhook/:
    post:
      operationId: v1_subscriptions_stripe_webhook_create
      description: Handle events sent by Stripe, such as checkout session completion.
      summary: Stripe webhook handler
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/subscriptions/upgrade/:
    post:
      operationId: v1_subscriptions_upgrade_create
      description: Upgrade the authenticated user's subscription plan to a higher-tier
        plan.
      summary: Upgrade subscription
      parameters:
      - in: query
        name: plan_id
        schema:
          type: integer
        description: ID of the new subscription plan
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/users/login/:
    post:
      operationId: v1_users_login_create
      description: Handles user login and returns JWT tokens
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Login successful, returns tokens
        '401':
          description: Invalid credentials
        '403':
          description: Email not verified
  /api/v1/users/logout/:
    post:
      operationId: v1_users_logout_create
      description: Handles user logout by blacklisting the refresh token
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '205':
          description: Logged out successfully
        '400':
          description: Invalid token
  /api/v1/users/otp/send/:
    post:
      operationId: v1_users_otp_send_create
      description: Handles OTP sending for various purposes like registration or password
        reset
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpSend'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OtpSend'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OtpSend'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: OTP sent successfully
        '400':
          description: Invalid request data
  /api/v1/users/otp/verify/:
    post:
      operationId: v1_users_otp_verify_create
      description: Handles OTP verification for various purposes
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OtpVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OtpVerification'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: OTP verified successfully, returns tokens
        '400':
          description: Invalid or expired OTP
  /api/v1/users/password/change/:
    post:
      operationId: v1_users_password_change_create
      description: An endpoint for changing the user password
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid password data
  /api/v1/users/password/reset/:
    post:
      operationId: v1_users_password_reset_create
      description: Handles password reset requests by sending OTP
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Password reset OTP sent successfully
        '404':
          description: User not found
  /api/v1/users/password/reset/confirm/:
    post:
      operationId: v1_users_password_reset_confirm_create
      description: Handles password reset confirmation and token generation
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Password reset successful, returns new tokens
        '400':
          description: Invalid reset data
  /api/v1/users/profile/:
    get:
      operationId: v1_users_profile_retrieve
      description: Handles user profile retrieval and updates
      parameters:
      - in: query
        name: user_id
        schema:
          type: integer
        description: Optional user ID to get specific profile
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
    put:
      operationId: v1_users_profile_update
      description: Handles user profile retrieval and updates
      parameters:
      - in: query
        name: user_id
        schema:
          type: integer
        description: Optional user ID to get specific profile
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
    patch:
      operationId: v1_users_profile_partial_update
      description: Handles user profile retrieval and updates
      parameters:
      - in: query
        name: user_id
        schema:
          type: integer
        description: Optional user ID to get specific profile
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
  /api/v1/users/profile/{user_id}/:
    get:
      operationId: v1_users_profile_retrieve_2
      description: Handles user profile retrieval and updates
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: Optional user ID to get specific profile
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
    put:
      operationId: v1_users_profile_update_2
      description: Handles user profile retrieval and updates
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: Optional user ID to get specific profile
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
    patch:
      operationId: v1_users_profile_partial_update_2
      description: Handles user profile retrieval and updates
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        schema:
          type: integer
        description: Optional user ID to get specific profile
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
  /api/v1/users/register/:
    post:
      operationId: v1_users_register_create
      description: Handles user registration and sends verification OTP
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: Registration successful, OTP sent
        '200':
          description: User exists but email not verified, OTP resent
        '400':
          description: Invalid registration data
  /api/v1/users/token/:
    post:
      operationId: v1_users_token_create
      description: Custom token view that uses MyTokenObtainPairSerializer
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      responses:
        '200':
          description: Returns access and refresh tokens
  /api/v1/users/token/refresh/:
    post:
      operationId: v1_users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    ChangePassword:
      type: object
      description: Serializer for changing user password.
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - new_password
      - old_password
    CustomUser:
      type: object
      description: Serializer for the User model to expose the user details.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        last_login:
          type: string
          format: date-time
          nullable: true
      required:
      - email
      - id
      - username
    MyTokenObtainPair:
      type: object
      description: Custom serializer to add additional claims in the JWT token.
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    NameEnum:
      enum:
      - basic
      - pro
      - enterprise
      type: string
      description: |-
        * `basic` - Basic
        * `pro` - Pro
        * `enterprise` - Enterprise
    OtpSend:
      type: object
      description: Serializer to send OTP for various purposes.
      properties:
        email:
          type: string
          format: email
        purpose:
          $ref: '#/components/schemas/PurposeEnum'
      required:
      - email
      - purpose
    OtpVerification:
      type: object
      description: Serializer to verify OTP.
      properties:
        email:
          type: string
          format: email
        otp:
          type: string
        purpose:
          $ref: '#/components/schemas/PurposeEnum'
      required:
      - email
      - otp
      - purpose
    PasswordResetConfirm:
      type: object
      description: Serializer to confirm password reset with a token.
      properties:
        reset_token:
          type: string
        new_password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - new_password
      - reset_token
    PasswordResetRequest:
      type: object
      description: Serializer to request a password reset.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PatchedProfile:
      type: object
      description: Serializer to handle user profile updates, including pending email
        changes.
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        address:
          type: string
          nullable: true
          maxLength: 255
        city:
          type: string
          nullable: true
          maxLength: 100
        country:
          type: string
          nullable: true
          maxLength: 100
        date_of_birth:
          type: string
          format: date
          nullable: true
        profile_picture:
          type: string
          format: uri
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        pending_email:
          type: string
          format: email
          writeOnly: true
    PatchedProjectUpdate:
      type: object
      description: Serializer for updating project details. Optionally updates the
        project's members.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        members:
          type: array
          items:
            type: integer
    Payment:
      type: object
      description: |-
        Serializer for the Payment model.
        Handles serialization of payment records for subscriptions.
      properties:
        id:
          type: integer
          readOnly: true
        subscription:
          type: integer
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        date:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - date
      - id
      - subscription
    Profile:
      type: object
      description: Serializer to handle user profile updates, including pending email
        changes.
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        address:
          type: string
          nullable: true
          maxLength: 255
        city:
          type: string
          nullable: true
          maxLength: 100
        country:
          type: string
          nullable: true
          maxLength: 100
        date_of_birth:
          type: string
          format: date
          nullable: true
        profile_picture:
          type: string
          format: uri
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        pending_email:
          type: string
          format: email
          writeOnly: true
      required:
      - user
    Project:
      type: object
      description: Serializer for the Project model, exposing project details and
        related memberships.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        total_tasks:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        due_date:
          type: string
          format: date-time
          nullable: true
        total_member_count:
          type: integer
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMembership'
          readOnly: true
      required:
      - created_at
      - id
      - members
      - name
      - owner
      - total_member_count
      - total_tasks
    ProjectCreate:
      type: object
      description: Serializer for creating a new project. Handles adding members to
        the project.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        members:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
      required:
      - members
      - name
    ProjectMembership:
      type: object
      description: |-
        Serializer for the ProjectMembership model, exposing details about
        the user and their project membership (joined date, total tasks, and completed tasks).
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        joined_at:
          type: string
          format: date-time
        total_tasks:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        completed_tasks:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - user
    ProjectUpdate:
      type: object
      description: Serializer for updating project details. Optionally updates the
        project's members.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        members:
          type: array
          items:
            type: integer
      required:
      - name
    PurposeEnum:
      enum:
      - REGISTRATION
      - EMAIL_CHANGE
      - PASSWORD_RESET
      type: string
      description: |-
        * `REGISTRATION` - REGISTRATION
        * `EMAIL_CHANGE` - EMAIL_CHANGE
        * `PASSWORD_RESET` - PASSWORD_RESET
    RoleEnum:
      enum:
      - admin
      - user
      type: string
      description: |-
        * `admin` - Admin
        * `user` - User
    StatusEnum:
      enum:
      - not_started
      - in_progress
      - completed
      - on_hold
      type: string
      description: |-
        * `not_started` - Not Started
        * `in_progress` - In Progress
        * `completed` - Completed
        * `on_hold` - On Hold
    Subscription:
      type: object
      description: |-
        Serializer for the Subscription model.
        Includes details about the plan using a nested SubscriptionPlanSerializer.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        plan:
          allOf:
          - $ref: '#/components/schemas/SubscriptionPlan'
          readOnly: true
        start_date:
          type: string
          format: date-time
          readOnly: true
        end_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
      required:
      - end_date
      - id
      - is_active
      - plan
      - start_date
      - user
    SubscriptionPlan:
      type: object
      description: |-
        Serializer for the SubscriptionPlan model.
        Converts the SubscriptionPlan model instances into JSON and vice versa.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          $ref: '#/components/schemas/NameEnum'
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        duration_days:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        max_projects:
          type: integer
          maximum: 9223372036854775807
          minimum: -1
          format: int64
        max_members_per_project:
          type: integer
          maximum: 9223372036854775807
          minimum: -1
          format: int64
      required:
      - id
      - max_members_per_project
      - max_projects
      - name
      - price
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      description: Serializer to display user details.
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        is_active:
          type: boolean
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - username
    UserLogin:
      type: object
      description: Serializer for user login.
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
    UserRegistration:
      type: object
      description: Serializer for registering a new user with email verification.
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - password
      - password2
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
