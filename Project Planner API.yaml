openapi: 3.0.3
info:
  title: Project Planner API
  version: 1.0.0
  description: API documentation for Project Planner.
paths:
  /api/v1/notifications/:
    get:
      operationId: v1_notifications_list
      description: |-
        API view to list notifications for the authenticated user.
        Supports filtering and ordering of notifications.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationListList'
          description: ''
    post:
      operationId: v1_notifications_create
      description: Handle POST request to mark notifications as read.
      summary: Mark Notifications as Read
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  description: List of notification IDs to mark as read. If empty,
                    all unread notifications will be marked as read.
              example:
                ids:
                - 1
                - 2
                - 3
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                message: Notifications marked as read successfully.
                code: 200
                data:
                  marked_count: 3
          description: ''
  /api/v1/notifications/{id}/:
    get:
      operationId: v1_notifications_retrieve
      description: Retrieve details of a specific notification.
      summary: Retrieve Notification Details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDetail'
          description: ''
    put:
      operationId: v1_notifications_update
      description: Update a notification (e.g., mark as read).
      summary: Update Notification
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDetail'
          description: ''
    patch:
      operationId: v1_notifications_partial_update
      description: Partially update a notification.
      summary: Partially Update Notification
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDetail'
          description: ''
  /api/v1/notifications/preferences/:
    get:
      operationId: v1_notifications_preferences_retrieve
      description: Retrieve notification preferences for the authenticated user.
      summary: Get Notification Preferences
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreference'
          description: ''
    put:
      operationId: v1_notifications_preferences_update
      description: Update all notification preferences for the authenticated user.
      summary: Update Notification Preferences
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPreference'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationPreference'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationPreference'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreference'
          description: ''
    patch:
      operationId: v1_notifications_preferences_partial_update
      description: Partially update notification preferences for the authenticated
        user.
      summary: Partially Update Notification Preferences
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationPreference'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationPreference'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationPreference'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreference'
          description: ''
  /api/v1/projects/:
    get:
      operationId: v1_projects_list
      parameters:
      - in: query
        name: due_date_after
        schema:
          type: string
          format: date
      - in: query
        name: due_date_before
        schema:
          type: string
          format: date
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - completed
          - in_progress
          - not_started
          - on_hold
          - overdue
        description: |-
          * `not_started` - Not Started
          * `in_progress` - In Progress
          * `completed` - Completed
          * `on_hold` - On Hold
          * `overdue` - Overdue
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectListList'
          description: ''
    post:
      operationId: v1_projects_create
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCreate'
          description: ''
  /api/v1/projects/{id}/:
    get:
      operationId: v1_projects_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: v1_projects_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpdate'
          description: ''
    patch:
      operationId: v1_projects_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUpdate'
          description: ''
    delete:
      operationId: v1_projects_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/projects/memberships/{id}/:
    get:
      operationId: v1_projects_memberships_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedProjectMembership'
          description: ''
  /api/v1/subscriptions/cancel/:
    post:
      operationId: v1_subscriptions_cancel_create
      description: Cancel the authenticated user's subscription and revert to the
        basic plan.
      summary: Cancel subscription
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/subscriptions/checkout-session/:
    post:
      operationId: v1_subscriptions_checkout_session_create
      description: Generate a Stripe checkout session for the authenticated user to
        upgrade their subscription.
      summary: Create checkout session
      parameters:
      - in: query
        name: plan_id
        schema:
          type: integer
        description: ID of the subscription plan to upgrade to
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/subscriptions/me/:
    get:
      operationId: v1_subscriptions_me_retrieve
      description: Retrieve the details of the currently active subscription for the
        authenticated user.
      summary: Get current user's subscription details
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: ''
  /api/v1/subscriptions/payments/:
    get:
      operationId: v1_subscriptions_payments_list
      description: Retrieve a list of all payments made by the authenticated user.
      summary: List user payments
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPaymentList'
          description: ''
  /api/v1/subscriptions/plans/:
    get:
      operationId: v1_subscriptions_plans_list
      description: Retrieve a list of all available subscription plans.
      summary: List all subscription plans
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubscriptionPlanList'
          description: ''
  /api/v1/subscriptions/stripe/webhook/:
    post:
      operationId: v1_subscriptions_stripe_webhook_create
      description: Handle events sent by Stripe, such as checkout session completion.
      summary: Stripe webhook handler
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/subscriptions/upgrade/:
    post:
      operationId: v1_subscriptions_upgrade_create
      description: Upgrade the authenticated user's subscription plan to a higher-tier
        plan.
      summary: Upgrade subscription
      parameters:
      - in: query
        name: plan_id
        schema:
          type: integer
        description: ID of the new subscription plan
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/tasks/:
    get:
      operationId: v1_tasks_list
      description: View to list all tasks or create a new task with assignees.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskListList'
          description: ''
    post:
      operationId: v1_tasks_create
      description: Retrieve a list of tasks with filters or create a new task.
      summary: List and Create Tasks
      parameters:
      - in: query
        name: assigned_by
        schema:
          type: integer
        description: Filter tasks by assigner ID
      - in: query
        name: due_date
        schema:
          type: string
        description: Filter tasks by due date
      - in: query
        name: need_approval
        schema:
          type: boolean
        description: Filter tasks requiring approval
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of items per page
      - in: query
        name: project
        schema:
          type: integer
        description: Filter tasks by project ID
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
        description: Filter tasks by status
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskListList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/tasks/{id}/:
    get:
      operationId: v1_tasks_retrieve
      description: Retrieve task details, including assignees, project information,
        and task status.
      summary: Retrieve Task Details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
    put:
      operationId: v1_tasks_update
      description: Update task details, such as assignees, status, or other fields.
      summary: Update Task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
    patch:
      operationId: v1_tasks_partial_update
      description: Partially update task details.
      summary: Partially Update Task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
    delete:
      operationId: v1_tasks_destroy
      description: Delete a specific task and notify assignees.
      summary: Delete Task
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/tasks/comments/:
    get:
      operationId: v1_tasks_comments_list
      description: View to list and create comments for tasks.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentListList'
          description: ''
    post:
      operationId: v1_tasks_comments_create
      description: Get a list of comments based on query parameters or create a new
        comment.
      summary: List and Create Comments
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of items per page
      - in: query
        name: parent_id
        schema:
          type: integer
        description: ID of the parent comment for replies
      - in: query
        name: project_id
        schema:
          type: integer
        description: ID of the project
      - in: query
        name: task_id
        schema:
          type: integer
        description: ID of the task
      - in: query
        name: user_id
        schema:
          type: integer
        description: ID of the user
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentListList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/tasks/comments/{id}/:
    get:
      operationId: v1_tasks_comments_retrieve
      description: Get details of a specific comment, update its content, or delete
        it.
      summary: Retrieve, Update or Delete a Comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDetail'
          description: ''
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
    put:
      operationId: v1_tasks_comments_update
      description: Update the content of a specific comment.
      summary: Update a Comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDetail'
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
    patch:
      operationId: v1_tasks_comments_partial_update
      description: API view to retrieve, update, or delete a specific comment.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCommentDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCommentDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCommentDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDetail'
          description: ''
    delete:
      operationId: v1_tasks_comments_destroy
      description: Delete a specific comment.
      summary: Delete a Comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/tasks/status/change/{id}/:
    patch:
      operationId: v1_tasks_status_change_partial_update
      description: Update the status of a task if the user is assigned and the task
        does not require approval.
      summary: Update Task Status
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskStatusChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskStatusChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskStatusChange'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '403':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/tasks/status/change/requests/:
    get:
      operationId: v1_tasks_status_change_requests_list
      description: API view for listing and creating status change requests.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStatusChangeRequestList'
          description: ''
    post:
      operationId: v1_tasks_status_change_requests_create
      description: API view for listing and creating status change requests.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChangeRequest'
          description: ''
  /api/v1/tasks/status/change/requests/{id}/:
    get:
      operationId: v1_tasks_status_change_requests_retrieve
      description: Retrieve details of a specific status change request by its ID.
      summary: Retrieve Status Change Request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChangeRequest'
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
    put:
      operationId: v1_tasks_status_change_requests_update
      description: API view for retrieving, updating, or deleting a specific status
        change request.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChangeRequest'
          description: ''
    patch:
      operationId: v1_tasks_status_change_requests_partial_update
      description: API view for retrieving, updating, or deleting a specific status
        change request.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStatusChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStatusChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStatusChangeRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChangeRequest'
          description: ''
    delete:
      operationId: v1_tasks_status_change_requests_destroy
      description: Delete a specific status change request.
      summary: Delete Status Change Request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/tasks/status/change/requests/{id}/action/:
    post:
      operationId: v1_tasks_status_change_requests_action_create
      description: Approve or reject a pending status change request.
      summary: Accept/Reject Status Change Request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeAction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StatusChangeAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StatusChangeAction'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChangeRequest'
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
        '404':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
          description: ''
  /api/v1/users/login/:
    post:
      operationId: v1_users_login_create
      description: Handles user login and returns JWT tokens
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Login successful, returns tokens
        '401':
          description: Invalid credentials
        '403':
          description: Email not verified
  /api/v1/users/logout/:
    post:
      operationId: v1_users_logout_create
      description: Handles user logout by blacklisting the refresh token
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '205':
          description: Logged out successfully
        '400':
          description: Invalid token
  /api/v1/users/otp/send/:
    post:
      operationId: v1_users_otp_send_create
      description: Handles OTP sending for various purposes like registration or password
        reset
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpSend'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OtpSend'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OtpSend'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: OTP sent successfully
        '400':
          description: Invalid request data
  /api/v1/users/otp/verify/:
    post:
      operationId: v1_users_otp_verify_create
      description: Handles OTP verification for various purposes
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OtpVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OtpVerification'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: OTP verified successfully, returns tokens
        '400':
          description: Invalid or expired OTP
  /api/v1/users/password/change/:
    post:
      operationId: v1_users_password_change_create
      description: An endpoint for changing the user password
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid password data
  /api/v1/users/password/reset/:
    post:
      operationId: v1_users_password_reset_create
      description: Handles password reset requests by sending OTP
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Password reset OTP sent successfully
        '404':
          description: User not found
  /api/v1/users/password/reset/confirm/:
    post:
      operationId: v1_users_password_reset_confirm_create
      description: Handles password reset confirmation and token generation
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Password reset successful, returns new tokens
        '400':
          description: Invalid reset data
  /api/v1/users/profile/:
    get:
      operationId: v1_users_profile_retrieve
      description: Handles user profile retrieval and updates
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
    put:
      operationId: v1_users_profile_update
      description: Handles user profile retrieval and updates
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
    patch:
      operationId: v1_users_profile_partial_update
      description: Handles user profile retrieval and updates
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
        '403':
          description: Permission denied
        '404':
          description: Profile not found
  /api/v1/users/register/:
    post:
      operationId: v1_users_register_create
      description: Handles user registration and sends verification OTP
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: Registration successful, OTP sent
        '200':
          description: User exists but email not verified, OTP resent
        '400':
          description: Invalid registration data
  /api/v1/users/token/:
    post:
      operationId: v1_users_token_create
      description: Custom token view that uses MyTokenObtainPairSerializer
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
        required: true
      responses:
        '200':
          description: Returns access and refresh tokens
  /api/v1/users/token/refresh/:
    post:
      operationId: v1_users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    ActionEnum:
      enum:
      - accept
      - reject
      type: string
      description: |-
        * `accept` - accept
        * `reject` - reject
    ChangePassword:
      type: object
      description: Serializer for changing user password.
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - new_password
      - old_password
    CommentCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        task:
          type: integer
        content:
          type: string
          maxLength: 1000
        parent:
          type: integer
          nullable: true
      required:
      - content
      - id
      - task
    CommentDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        task:
          type: string
          readOnly: true
        project:
          type: string
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        content:
          type: string
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        mentioned_users:
          type: array
          items:
            $ref: '#/components/schemas/CustomUser'
          readOnly: true
        parent:
          type: integer
          nullable: true
        reply_count:
          type: integer
          readOnly: true
        mention_count:
          type: integer
          readOnly: true
        replies:
          type: string
          readOnly: true
      required:
      - author
      - content
      - created_at
      - id
      - mention_count
      - mentioned_users
      - project
      - replies
      - reply_count
      - task
      - updated_at
    CommentList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        task:
          type: string
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        content:
          type: string
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        parent:
          type: integer
          nullable: true
        reply_count:
          type: integer
          readOnly: true
        mention_count:
          type: integer
          readOnly: true
      required:
      - author
      - content
      - created_at
      - id
      - mention_count
      - reply_count
      - task
      - updated_at
    ContentType:
      type: object
      description: Serializer for ContentType model, used for generic relations.
      properties:
        id:
          type: integer
          readOnly: true
        app_label:
          type: string
          maxLength: 100
        model:
          type: string
          title: Python model class name
          maxLength: 100
      required:
      - app_label
      - id
      - model
    CustomUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - id
      - username
    DetailedProjectMembership:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/DetailedUser'
          readOnly: true
        joined_at:
          type: string
          format: date-time
        total_tasks:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        completed_tasks:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - user
    DetailedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        last_login:
          type: string
          format: date-time
          nullable: true
      required:
      - email
      - id
      - username
    MyTokenObtainPair:
      type: object
      description: Custom serializer to add additional claims in the JWT token.
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    NameEnum:
      enum:
      - basic
      - pro
      - enterprise
      type: string
      description: |-
        * `basic` - Basic
        * `pro` - Pro
        * `enterprise` - Enterprise
    NotificationDetail:
      type: object
      description: |-
        Detailed serializer for Notification model.
        Includes all fields and related information for a comprehensive view of a notification.
      properties:
        id:
          type: integer
          readOnly: true
        recipient:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        message:
          type: string
          description: Content of the notification
        is_read:
          type: boolean
          description: Indicates if the notification has been read
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when notification was created
        notification_type:
          allOf:
          - $ref: '#/components/schemas/NotificationTypeEnum'
          description: |-
            Category of notification (e.g., task, project)

            * `account` - Account Notifications
            * `project` - Project Notifications
            * `task` - Task Notifications
            * `comment` - Comment Mentions
            * `subscription` - Subscription Updates
        status:
          allOf:
          - $ref: '#/components/schemas/NotificationDetailStatusEnum'
          readOnly: true
          description: |-
            Delivery status of the notification

            * `pending` - Pending
            * `delivered` - Delivered
            * `failed` - Failed
        priority:
          allOf:
          - $ref: '#/components/schemas/PriorityEnum'
          description: |-
            Priority of the notification

            * `low` - Low
            * `medium` - Medium
            * `high` - High
        content_type:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          readOnly: true
        object_id:
          type: integer
          readOnly: true
          nullable: true
          description: ID of the related object
      required:
      - content_type
      - created_at
      - id
      - message
      - notification_type
      - object_id
      - recipient
      - status
    NotificationDetailStatusEnum:
      enum:
      - pending
      - delivered
      - failed
      type: string
      description: |-
        * `pending` - Pending
        * `delivered` - Delivered
        * `failed` - Failed
    NotificationList:
      type: object
      description: |-
        Serializer for listing notifications with essential information.
        Used in list views to provide a concise representation of notifications.
      properties:
        id:
          type: integer
          readOnly: true
        message:
          type: string
          description: Content of the notification
        is_read:
          type: boolean
          description: Indicates if the notification has been read
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when notification was created
        notification_type:
          allOf:
          - $ref: '#/components/schemas/NotificationTypeEnum'
          description: |-
            Category of notification (e.g., task, project)

            * `account` - Account Notifications
            * `project` - Project Notifications
            * `task` - Task Notifications
            * `comment` - Comment Mentions
            * `subscription` - Subscription Updates
        priority:
          allOf:
          - $ref: '#/components/schemas/PriorityEnum'
          description: |-
            Priority of the notification

            * `low` - Low
            * `medium` - Medium
            * `high` - High
      required:
      - created_at
      - id
      - message
      - notification_type
    NotificationPreference:
      type: object
      description: |-
        Serializer for NotificationPreference model.
        Handles user preferences for different types of notifications.
      properties:
        user:
          type: integer
          readOnly: true
          description: User whose notification preferences these are
        preferences:
          description: JSON object storing notification preferences
      required:
      - user
    NotificationTypeEnum:
      enum:
      - account
      - project
      - task
      - comment
      - subscription
      type: string
      description: |-
        * `account` - Account Notifications
        * `project` - Project Notifications
        * `task` - Task Notifications
        * `comment` - Comment Mentions
        * `subscription` - Subscription Updates
    OtpSend:
      type: object
      description: Serializer to send OTP for various purposes.
      properties:
        email:
          type: string
          format: email
        purpose:
          $ref: '#/components/schemas/PurposeEnum'
      required:
      - email
      - purpose
    OtpVerification:
      type: object
      description: Serializer to verify OTP.
      properties:
        email:
          type: string
          format: email
        otp:
          type: string
        purpose:
          $ref: '#/components/schemas/PurposeEnum'
      required:
      - email
      - otp
      - purpose
    PaginatedCommentListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CommentList'
    PaginatedNotificationListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/NotificationList'
    PaginatedPaymentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
    PaginatedProjectListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProjectList'
    PaginatedStatusChangeRequestList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/StatusChangeRequest'
    PaginatedSubscriptionPlanList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionPlan'
    PaginatedTaskListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TaskList'
    PasswordResetConfirm:
      type: object
      description: Serializer to confirm password reset with a token.
      properties:
        reset_token:
          type: string
        new_password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - new_password
      - reset_token
    PasswordResetRequest:
      type: object
      description: Serializer to request a password reset.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PatchedCommentDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        task:
          type: string
          readOnly: true
        project:
          type: string
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        content:
          type: string
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        mentioned_users:
          type: array
          items:
            $ref: '#/components/schemas/CustomUser'
          readOnly: true
        parent:
          type: integer
          nullable: true
        reply_count:
          type: integer
          readOnly: true
        mention_count:
          type: integer
          readOnly: true
        replies:
          type: string
          readOnly: true
    PatchedNotificationDetail:
      type: object
      description: |-
        Detailed serializer for Notification model.
        Includes all fields and related information for a comprehensive view of a notification.
      properties:
        id:
          type: integer
          readOnly: true
        recipient:
          allOf:
          - $ref: '#/components/schemas/UserMinimal'
          readOnly: true
        message:
          type: string
          description: Content of the notification
        is_read:
          type: boolean
          description: Indicates if the notification has been read
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when notification was created
        notification_type:
          allOf:
          - $ref: '#/components/schemas/NotificationTypeEnum'
          description: |-
            Category of notification (e.g., task, project)

            * `account` - Account Notifications
            * `project` - Project Notifications
            * `task` - Task Notifications
            * `comment` - Comment Mentions
            * `subscription` - Subscription Updates
        status:
          allOf:
          - $ref: '#/components/schemas/NotificationDetailStatusEnum'
          readOnly: true
          description: |-
            Delivery status of the notification

            * `pending` - Pending
            * `delivered` - Delivered
            * `failed` - Failed
        priority:
          allOf:
          - $ref: '#/components/schemas/PriorityEnum'
          description: |-
            Priority of the notification

            * `low` - Low
            * `medium` - Medium
            * `high` - High
        content_type:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          readOnly: true
        object_id:
          type: integer
          readOnly: true
          nullable: true
          description: ID of the related object
    PatchedNotificationPreference:
      type: object
      description: |-
        Serializer for NotificationPreference model.
        Handles user preferences for different types of notifications.
      properties:
        user:
          type: integer
          readOnly: true
          description: User whose notification preferences these are
        preferences:
          description: JSON object storing notification preferences
    PatchedProfile:
      type: object
      description: Serializer to handle user profile updates, including nested user
        updates and email changes.
      properties:
        user:
          $ref: '#/components/schemas/User'
        address:
          type: string
          nullable: true
          maxLength: 255
        city:
          type: string
          nullable: true
          maxLength: 100
        country:
          type: string
          nullable: true
          maxLength: 100
        date_of_birth:
          type: string
          format: date
          nullable: true
        first_name:
          type: string
        last_name:
          type: string
        profile_picture:
          type: string
          format: uri
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        pending_email:
          type: string
          format: email
          writeOnly: true
        owned_projects_count:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        participated_projects_count:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
    PatchedProjectUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/StatusC03Enum'
        members:
          type: array
          items:
            type: integer
    PatchedStatusChangeRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        task:
          type: integer
        task_name:
          type: string
          readOnly: true
        user:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        request_time:
          type: string
          format: date-time
          readOnly: true
        reason:
          type: string
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusChangeRequestStatusEnum'
          readOnly: true
        approved_by:
          type: integer
          readOnly: true
          nullable: true
    PatchedTaskStatusChange:
      type: object
      description: |-
        Serializer to handle the task status update. This serializer only validates
        the status change for tasks that do not require approval.
      properties:
        status:
          $ref: '#/components/schemas/StatusA33Enum'
    PatchedTaskUpdate:
      type: object
      description: Serializer for updating task details, including managing assignees.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/StatusA33Enum'
        due_date:
          type: string
          format: date-time
          nullable: true
        project:
          type: integer
          readOnly: true
        need_approval:
          type: boolean
        assignees:
          type: array
          items:
            type: integer
        assigned_by:
          type: integer
          readOnly: true
        approved_by:
          type: integer
          nullable: true
        total_assignees:
          type: integer
          readOnly: true
    Payment:
      type: object
      description: |-
        Serializer for the Payment model.
        Handles serialization of payment records for subscriptions.
      properties:
        id:
          type: integer
          readOnly: true
        subscription:
          type: integer
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        date:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - date
      - id
      - subscription
    PriorityEnum:
      enum:
      - low
      - medium
      - high
      type: string
      description: |-
        * `low` - Low
        * `medium` - Medium
        * `high` - High
    Profile:
      type: object
      description: Serializer to handle user profile updates, including nested user
        updates and email changes.
      properties:
        user:
          $ref: '#/components/schemas/User'
        address:
          type: string
          nullable: true
          maxLength: 255
        city:
          type: string
          nullable: true
          maxLength: 100
        country:
          type: string
          nullable: true
          maxLength: 100
        date_of_birth:
          type: string
          format: date
          nullable: true
        first_name:
          type: string
        last_name:
          type: string
        profile_picture:
          type: string
          format: uri
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 15
        pending_email:
          type: string
          format: email
          writeOnly: true
        owned_projects_count:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        participated_projects_count:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - user
    Project:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        total_tasks:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusC03Enum'
        due_date:
          type: string
          format: date-time
          nullable: true
        total_member_count:
          type: integer
          readOnly: true
        owner:
          allOf:
          - $ref: '#/components/schemas/CustomUser'
          readOnly: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/ProjectMembership'
          readOnly: true
      required:
      - created_at
      - id
      - members
      - name
      - owner
      - total_member_count
      - total_tasks
    ProjectCreate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        members:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        status:
          $ref: '#/components/schemas/StatusC03Enum'
      required:
      - name
    ProjectList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusC03Enum'
        due_date:
          type: string
          format: date-time
          nullable: true
      required:
      - id
      - name
    ProjectMembership:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
        joined_at:
          type: string
          format: date-time
        membership_url:
          type: string
          readOnly: true
      required:
      - id
      - membership_url
      - user
    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/StatusC03Enum'
        members:
          type: array
          items:
            type: integer
      required:
      - name
    PurposeEnum:
      enum:
      - REGISTRATION
      - EMAIL_CHANGE
      - PASSWORD_RESET
      type: string
      description: |-
        * `REGISTRATION` - REGISTRATION
        * `EMAIL_CHANGE` - EMAIL_CHANGE
        * `PASSWORD_RESET` - PASSWORD_RESET
    StatusA33Enum:
      enum:
      - not_started
      - in_progress
      - completed
      - overdue
      type: string
      description: |-
        * `not_started` - Not Started
        * `in_progress` - In Progress
        * `completed` - Completed
        * `overdue` - Overdue
    StatusC03Enum:
      enum:
      - not_started
      - in_progress
      - completed
      - on_hold
      - overdue
      type: string
      description: |-
        * `not_started` - Not Started
        * `in_progress` - In Progress
        * `completed` - Completed
        * `on_hold` - On Hold
        * `overdue` - Overdue
    StatusChangeAction:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ActionEnum'
      required:
      - action
    StatusChangeRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        task:
          type: integer
        task_name:
          type: string
          readOnly: true
        user:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        request_time:
          type: string
          format: date-time
          readOnly: true
        reason:
          type: string
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusChangeRequestStatusEnum'
          readOnly: true
        approved_by:
          type: integer
          readOnly: true
          nullable: true
      required:
      - approved_by
      - id
      - request_time
      - status
      - task
      - task_name
      - user
      - username
    StatusChangeRequestStatusEnum:
      enum:
      - pending
      - approved
      - rejected
      type: string
      description: |-
        * `pending` - Pending
        * `approved` - Approved
        * `rejected` - Rejected
    Subscription:
      type: object
      description: |-
        Serializer for the Subscription model.
        Includes details about the plan using a nested SubscriptionPlanSerializer.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        plan:
          allOf:
          - $ref: '#/components/schemas/SubscriptionPlan'
          readOnly: true
        start_date:
          type: string
          format: date-time
          readOnly: true
        end_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
      required:
      - end_date
      - id
      - is_active
      - plan
      - start_date
      - user
    SubscriptionPlan:
      type: object
      description: |-
        Serializer for the SubscriptionPlan model.
        Converts the SubscriptionPlan model instances into JSON and vice versa.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          $ref: '#/components/schemas/NameEnum'
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        duration_days:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        max_projects:
          type: integer
          maximum: 9223372036854775807
          minimum: -1
          format: int64
        max_members_per_project:
          type: integer
          maximum: 9223372036854775807
          minimum: -1
          format: int64
      required:
      - id
      - max_members_per_project
      - max_projects
      - name
      - price
    TaskAssignment:
      type: object
      description: Optimized serializer for task assignment details.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: string
        assigned_at:
          type: string
          format: date-time
          readOnly: true
        membership_url:
          type: string
          readOnly: true
      required:
      - assigned_at
      - id
      - membership_url
      - user
    TaskCreate:
      type: object
      description: Serializer for creating a new task with optional assignees.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/StatusA33Enum'
        due_date:
          type: string
          format: date-time
        total_assignees:
          type: integer
          readOnly: true
        project:
          type: integer
        need_approval:
          type: boolean
        assignees:
          type: array
          items:
            type: integer
        approved_by:
          type: integer
          readOnly: true
          nullable: true
      required:
      - approved_by
      - id
      - name
      - project
      - total_assignees
    TaskDetail:
      type: object
      description: Serializer for showing detailed information about a task.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/StatusA33Enum'
        due_date:
          type: string
          format: date-time
          nullable: true
        project:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        total_assignees:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        need_approval:
          type: boolean
        assigned_by:
          type: string
          readOnly: true
        approved_by:
          type: string
          readOnly: true
        assignments_:
          type: array
          items:
            $ref: '#/components/schemas/TaskAssignment'
          readOnly: true
          title: 'Assignments '
      required:
      - approved_by
      - assigned_by
      - assignments_
      - created_at
      - id
      - name
      - project
      - updated_at
    TaskList:
      type: object
      description: Serializer for listing tasks with minimal information.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        due_date:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/StatusA33Enum'
      required:
      - id
      - name
    TaskUpdate:
      type: object
      description: Serializer for updating task details, including managing assignees.
      properties:
        name:
          type: string
          maxLength: 255
        description:
          type: string
        status:
          $ref: '#/components/schemas/StatusA33Enum'
        due_date:
          type: string
          format: date-time
          nullable: true
        project:
          type: integer
          readOnly: true
        need_approval:
          type: boolean
        assignees:
          type: array
          items:
            type: integer
        assigned_by:
          type: integer
          readOnly: true
        approved_by:
          type: integer
          nullable: true
        total_assignees:
          type: integer
          readOnly: true
      required:
      - assigned_by
      - name
      - project
      - total_assignees
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      description: Serializer to display user details.
      properties:
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email_verified:
          type: boolean
        plan:
          type: string
          readOnly: true
      required:
      - email
      - plan
      - username
    UserLogin:
      type: object
      description: Serializer for user login.
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
    UserMinimal:
      type: object
      description: Minimal serializer for User model, used for nested representations.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - id
      - username
    UserRegistration:
      type: object
      description: Serializer for registering a new user with email verification.
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - password
      - password2
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
